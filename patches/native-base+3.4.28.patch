diff --git a/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js b/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js
index e9364fb..8317bcf 100644
--- a/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js
+++ b/node_modules/native-base/lib/commonjs/hooks/useKeyboardDismissable.js
@@ -7,14 +7,35 @@ exports.useBackHandler = useBackHandler;
 exports.useKeyboardDismissable = exports.keyboardDismissHandlerManager = void 0;
 
 var _react = _interopRequireWildcard(require("react"));
-
 var _reactNative = require("react-native");
 
 function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
-
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) { return obj; }
+  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) { return cache.get(obj); }
+  var newObj = {};
+  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) { cache.set(obj, newObj); }
+  return newObj;
+}
 
 let keyboardDismissHandlers = [];
+
 const keyboardDismissHandlerManager = {
   push: handler => {
     keyboardDismissHandlers.push(handler);
@@ -27,9 +48,6 @@ const keyboardDismissHandlerManager = {
     return keyboardDismissHandlers.pop();
   }
 };
-/**
- * Handles attaching callback for Escape key listener on web and Back button listener on Android
- */
 
 exports.keyboardDismissHandlerManager = keyboardDismissHandlerManager;
 
@@ -38,7 +56,7 @@ const useKeyboardDismissable = ({
   callback
 }) => {
   _react.default.useEffect(() => {
-    let cleanupFn = () => {};
+    let cleanupFn = () => { };
 
     if (enabled) {
       cleanupFn = keyboardDismissHandlerManager.push(callback);
@@ -69,13 +87,14 @@ function useBackHandler({
       return true;
     };
 
+    let subscription;
+
     if (enabled) {
-      _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);
-    } else {
-      _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);
+      subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);
     }
 
-    return () => _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);
+    return () => {
+      subscription?.remove?.();
+    };
   }, [enabled, callback]);
 }
-//# sourceMappingURL=useKeyboardDismissable.js.map
\ No newline at end of file
